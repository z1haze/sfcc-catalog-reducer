/**
* CreateProductIterator Script File
*
*   @input CatalogReducerDefinition: dw.object.CustomObject
*   @output StoreFrontProductIterator : dw.util.Iterator
*   @output MasterProductArray : dw.util.ArrayList
*   @output StorefrontCatalog : dw.catalog.Catalog
*
*/


importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.catalog );
importPackage( dw.object );

function execute( args : PipelineDictionary ) : Number
{
    //Retrived from Custom Object
    var numberofProducts : Number = args.CatalogReducerDefinition.custom.numberProducts;
    var onlineProducts : Boolean = args.CatalogReducerDefinition.custom.onlineProducts;
    if (args.CatalogReducerDefinition.custom.productIDs != null) {
    	var specificProductIDArrayList : ArrayList = args.CatalogReducerDefinition.custom.productIDs.split(",");
    }
    else {
    	var specificProductIDArrayList : ArrayList = new ArrayList();
    }
    var storefrontCatalog : Catalog = CatalogMgr.getCatalog(args.CatalogReducerDefinition.custom.storefrontCatalog);

    var rootCategory : Category = storefrontCatalog.getRoot();
    var rootSubCategories :  Collection  = rootCategory.getSubCategories();
    var log : Logger = Logger.getLogger("BCM","");
    var productExportList : ArrayList = new ArrayList();
    
 
    
    //Initializing Array
    productExportList[0] = new ArrayList();
    productExportList[1] = new ArrayList();

    //Get Products to fill out Catalog
    productExportList = getProductsfromSubCategories(rootSubCategories, productExportList, numberofProducts, onlineProducts, log);  
    
    //Assign User defined Products to correct Array for Exporting
    assignspecificProductstoArrays(specificProductIDArrayList, productExportList);
    
    var test : Number = productExportList[0].size();
    var test2 : Number = productExportList[1].size();
   
   args.StorefrontCatalog =  storefrontCatalog;
   args.MasterProductArray  = productExportList[1];
   args.StoreFrontProductIterator = productExportList[0].iterator();  
   
   return PIPELET_NEXT;
}



// Function will recursively call itself to get through all subcategories of a catalog and grab Products for each category
function getProductsfromSubCategories(rootSubCategories : Collection, productExportList : ArrayList, numberofProducts : Number, onlineProducts : boolean, log : Logger)
{   
        for each (var subCategory : Category in  rootSubCategories)
        {
            log.error(subCategory.ID);
            if (subCategory.getSubCategories().length > 0)
            {
                getProductsfromSubCategories(subCategory.getSubCategories(), productExportList, numberofProducts, onlineProducts, log);
            }
            else
            {
                if(onlineProducts == true)
                {
                    var products: Iterator = subCategory.getOnlineProducts().iterator();
                }
                else
                {
                    var products: Iterator = subCategory.getProducts().iterator();
                }
                
                var count: Number = 0;
                
                if(products.hasNext() && (numberofProducts > count))
                {
                    var product : Product = products.next();
                    //log.error(subCategory.ID + "," + product.ID + "," + product.isAssignedToSiteCatalog());
                    
                    if(product.isAssignedToSiteCatalog() == true)
                    {
                        productExportList[0].push(product);
                    }
                    else
                    { 
                        productExportList[1].push(product);
                    }
                    
                    count = count++;                
                }
            }
        }
return productExportList
}

//Function takes the user inputted ProductIDS and adds the product object to the right array if it is not already added.
function assignspecificProductstoArrays(specificProductIDArrayList : ArrayList, productExportList : ArrayList)
{
    for each(var productID : String in specificProductIDArrayList)
    {
        var product : Product = ProductMgr.getProduct(productID);
        
        if(product.isAssignedToSiteCatalog() == true && productExportList[0].contains(product) != true)
        {
            productExportList[0].push(product);
        }
        else if(product.isAssignedToSiteCatalog() == false && productExportList[1].contains(product) != true)
        { 
            productExportList[1].push(product);
        }
    }
    
}

