/**
* CreateProductIterator Script File
*
*   @input CatalogReducerDefinition: dw.object.CustomObject
*   @output StoreFrontProductIterator : dw.util.Iterator
*   @output MasterProductArray : dw.util.ArrayList
*   @output StorefrontCatalog : dw.catalog.Catalog
*
*/


importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.catalog );
importPackage( dw.object );

function execute( args : PipelineDictionary ) : Number
{
    //Retrived from Custom Object
    var numberofProducts : Number = args.CatalogReducerDefinition.custom.numberProducts;
    var onlineProducts : Boolean = args.CatalogReducerDefinition.custom.onlineProducts;
    var storefrontCatalog : Catalog = CatalogMgr.getCatalog(args.CatalogReducerDefinition.custom.storefrontCatalog);

    var rootCategory : Category = storefrontCatalog.getRoot();
    var rootSubCategories :  Collection  = rootCategory.getSubCategories();
    var log : Logger = Logger.getLogger("BCM","");
    var productExportList : ArrayList = new ArrayList();
    
    //Initializing Array
    productExportList[0] = new ArrayList();
    productExportList[1] = new ArrayList();

    //Calls Recursive function to work through Catalog Structure to get products of all categories
    productExportList = getProductsfromSubCategories(rootSubCategories, productExportList, numberofProducts, onlineProducts, log);  
    
    var test : Number = productExportList[0].size();
    var test2 : Number = productExportList[1].size();
    
    //Assign User defined Products to correct Array for Exporting
     if (args.CatalogReducerDefinition.custom.productIDs != null)
     {
     	var specificProductIDArrayList : ArrayList = args.CatalogReducerDefinition.custom.productIDs.split(",");
    	assignspecificProductstoArrays(specificProductIDArrayList, productExportList);
     }
    
    test = productExportList[0].size();
    test2 = productExportList[1].size();
   
   args.StorefrontCatalog =  storefrontCatalog;
   args.MasterProductArray  = productExportList[0];
   args.StoreFrontProductIterator = productExportList[1].iterator();  
   
   return PIPELET_NEXT;
}




// Function will recursively call itself to get through all subcategories of a catalog and grab Products for each category
function getProductsfromSubCategories(rootSubCategories : Collection, productExportList : ArrayList, numberofProducts : Number, onlineProducts : boolean, log : Logger)
{   
        for each (var subCategory : Category in  rootSubCategories)
        {
            log.error(subCategory.ID);
            if (subCategory.getSubCategories().length > 0)
            {
                getProductsfromSubCategories(subCategory.getSubCategories(), productExportList, numberofProducts, onlineProducts, log);
            }
            else
            {
                if(onlineProducts == true)
                {
                    var products: Iterator = subCategory.getOnlineProducts().iterator();
                }
                else
                {
                    var products: Iterator = subCategory.getProducts().iterator();
                }
                
                var count: Number = 0;
                
                if(products.hasNext() && (numberofProducts > count))
                {
                    var product : Product = products.next();
                    //log.error(subCategory.ID + "," + product.ID + "," + product.isAssignedToSiteCatalog());
                    
          			
                    if(product.isMaster() == true)
                    {   
                    	//Handle Master's Variations
                    	getVariants(product, productExportList, onlineProducts);
                    }
                    	
                    if(product.isAssignedToSiteCatalog() == true)
                    {
                        productExportList[0].push(product);
                    }
                    else
                    { 
                        productExportList[1].push(product);
                    }
                    
                    count = count++;                
                }
            }
        }
return productExportList
}

//Function takes the user inputted ProductIDS and adds the product object to the right array if it is not already added.
function assignspecificProductstoArrays(specificProductIDArrayList : ArrayList, productExportList : ArrayList)
{
    for each(var productID : String in specificProductIDArrayList)
    {
        var product : Product = ProductMgr.getProduct(productID);
        
        if(product.isMaster() == true)
        {   
        	//Handle Master's Variations
            getVariants(product, productExportList, false);
        }
        
        if(product.isAssignedToSiteCatalog() == true && productExportList[0].contains(product) != true)
        {
            productExportList[0].push(product);
        }
        else if(product.isAssignedToSiteCatalog() == false && productExportList[1].contains(product) != true)
        { 
            productExportList[1].push(product);
        }
    }
    
}

//This function gets all the variants of a Master Product and adds them to the correct export Array
function getVariants(product : Product, productExportList : ArrayList, onlineProducts : Boolean )
{
	var variants : Collection = product.variants;
	
	for each( var variantProduct : Product in variants)
	{
		if(onlineProducts == true)
		{
			if(variantProduct.isOnline() == true && variantProduct.isAssignedToSiteCatalog() == true)
			{
				  	productExportList[0].push(variantProduct);
            }
            else if(variantProduct.isOnline() == true && variantProduct.isAssignedToSiteCatalog() == false)
            { 
              		productExportList[1].push(variantProduct);
            }
					
		}
		else
		{
			if(variantProduct.isAssignedToSiteCatalog() == true)
			{
				  	productExportList[0].push(variantProduct);
            }
            else
            { 
              		productExportList[1].push(variantProduct);
            }
			
		}		
	}
	
}

